@import "functions";
@import "variables";
@import "breakpoints";

@mixin generateRelativeView($max-view: 6) {
  $min-pourcentage: calc(100% / $max-view);
  @for $i from 1 through $max-view {
    .h--#{$i}-#{$max-view} {
      height: $min-pourcentage * $i;
    }

    .w--#{$i}-#{$max-view} {
      width: $min-pourcentage * $i;
    }

    @each $keyBreakpoints, $valueBreakpoints in $breakpoints {
      @media screen and (min-width: $valueBreakpoints) {
        .#{$keyBreakpoints}--h--#{$i}-#{$max-view} {
          height: $min-pourcentage * $i;
        }

        .#{$keyBreakpoints}--w--#{$i}-#{$max-view} {
          width: $min-pourcentage * $i;
        }
      }
    }
  }
}

//relativeView
//max view 6
@include generateRelativeView(6);
//max view 12
@include generateRelativeView(12);

@for $i from 0 through 100 {
  //margins
  //margin
  .m--#{$i} {
    margin: ($base-margin * $i);
  }

  //margin-left
  .ml--#{$i} {
    margin-left: ($base-margin * $i);
  }

  //margin--right
  .mr--#{$i} {
    margin-right: ($base-margin * $i);
  }

  //margin-left & margin-right
  .mx--#{$i} {
    margin-right: ($base-margin * $i);
    margin-left: ($base-margin * $i);
  }

  //margin--top
  .mt--#{$i} {
    margin-top: ($base-margin * $i);
  }

  //margin-bottom
  .mb--#{$i} {
    margin-bottom: ($base-margin * $i);
  }

  //margin-top & margin-bottom
  .my--#{$i} {
    margin-top: ($base-margin * $i);
    margin-bottom: ($base-margin * $i);
  }

  //paddings
  .p--#{$i} {
    padding: $base-padding * $i;
  }

  //padding-left
  .pl--#{$i} {
    padding-left: $base-padding * $i;
  }

  //padding-right
  .pr--#{$i} {
    padding-right: $base-padding * $i;
  }

  //padding-right & padding-left
  .px--#{$i} {
    padding-right: $base-padding * $i;
    padding-left: $base-padding * $i;
  }

  //padding top
  .pt--#{$i} {
    padding-top: $base-padding * $i;
  }

  //padding bottom
  .pb--#{$i} {
    padding-bottom: $base-padding * $i;
  }

  //padding-bottom & padding-top
  .py--#{$i} {
    padding-top: $base-padding * $i;
    padding-bottom: $base-padding * $i;
  }

  //height
  .h--#{$i} {
    height: $base-height * $i;
  }

  //min-height
  .min--h--#{$i} {
    min-height: $base-height * $i;
  }

  //min-width
  .min--w--#{$i} {
    min-width: $base-width * $i;
  }

  //width
  .w--#{$i} {
    width: $base-width * $i;
  }

  .gap--#{$i} {
    gap: $base-gap * $i;
  }

  .top--#{$i} {
    top: $i * 1%;
  }

  .left--#{$i} {
    left: $i * 1%;
  }

  //breakpoints utilities
  @each $keyBreakpoints, $valueBreakpoints in $breakpoints {
    @media screen and (min-width: $valueBreakpoints) {
      //margins
      //margin
      .#{$keyBreakpoints}--m--#{$i} {
        margin: ($base-margin * $i);
      }

      //margin-left
      .#{$keyBreakpoints}--ml--#{$i} {
        margin-left: ($base-margin * $i);
      }

      //margin--right
      .#{$keyBreakpoints}--mr--#{$i} {
        margin-right: ($base-margin * $i);
      }

      //margin-left & margin-right
      .#{$keyBreakpoints}--mx--#{$i} {
        margin-right: ($base-margin * $i);
        margin-left: ($base-margin * $i);
      }

      //margin--top
      .#{$keyBreakpoints}--mt--#{$i} {
        margin-top: ($base-margin * $i);
      }

      //margin-bottom
      .#{$keyBreakpoints}--mb--#{$i} {
        margin-bottom: ($base-margin * $i);
      }

      //margin-top & margin-bottom
      .#{$keyBreakpoints}--my--#{$i} {
        margin-top: ($base-margin * $i);
        margin-bottom: ($base-margin * $i);
      }

      //paddings
      .#{$keyBreakpoints}--p--#{$i} {
        padding: $base-padding * $i;
      }

      //padding-left
      .#{$keyBreakpoints}--pl--#{$i} {
        padding-left: $base-padding * $i;
      }

      //padding-right
      .#{$keyBreakpoints}--pr--#{$i} {
        padding-right: $base-padding * $i;
      }

      //padding-right & padding-left
      .#{$keyBreakpoints}--px--#{$i} {
        padding-right: $base-padding * $i;
        padding-left: $base-padding * $i;
      }

      //padding top
      .#{$keyBreakpoints}--pt--#{$i} {
        padding-top: $base-padding * $i;
      }

      //padding bottom
      .#{$keyBreakpoints}--pb--#{$i} {
        padding-bottom: $base-padding * $i;
      }

      //padding-bottom & padding-top
      .#{$keyBreakpoints}--py--#{$i} {
        padding-top: $base-padding * $i;
        padding-bottom: $base-padding * $i;
      }

      //height
      .#{$keyBreakpoints}--h--#{$i} {
        height: $base-height * $i;
      }

      //min-height
      .#{$keyBreakpoints}--min--h--#{$i} {
        min-height: $base-height * $i;
      }

      //min-width
      .#{$keyBreakpoints}--min--w--#{$i} {
        min-width: $base-width * $i;
      }

      //width
      .#{$keyBreakpoints}--w--#{$i} {
        width: $base-width * $i;
      }

      .#{$keyBreakpoints}--gap--#{$i} {
        gap: $base-gap * $i;
      }

      .#{$keyBreakpoints}--top--#{$i} {
        top: $i * 1%;
      }

      .#{$keyBreakpoints}--left--#{$i} {
        left: $i * 1%;
      }
    }
  }
}

//borders
//border radius
@each $borderRadiusKey, $borderRadiusValue in $rounded {
  .rounded--#{$borderRadiusKey} {
    border-radius: $borderRadiusValue;
  }

  @each $keyBreakpoints, $valueBreakpoints in $breakpoints {
    .#{$keyBreakpoints}--rounded--#{$borderRadiusKey} {
      border-radius: $borderRadiusValue;
    }
  }
}

//border style
@each $borderStyleValue in $border-style {
  .border--#{$borderStyleValue} {
    border-style: $borderStyleValue;
  }

  @each $keyBreakpoints, $valueBreakpoint in $breakpoints {
    @media screen and (min-width: $valueBreakpoint) {
      .#{$keyBreakpoints}--border--#{$borderStyleValue} {
        border-style: $borderStyleValue;
      }
    }
  }
}

//displays
@each $val in $displays {
  .d--#{$val} {
    display: $val;
  }

  @each $keyBreakpoints, $valueBreakpoint in $breakpoints {
    @media screen and (min-width: $valueBreakpoint) {
      .#{$keyBreakpoints}--d--#{$val} {
        display: $val;
      }
    }
  }
}

//flex alignement
@each $val in $align-items {
  .items--#{$val} {
    align-items: $val;
  }

  @each $keyBreakpoints, $valueBreakpoint in $breakpoints {
    @media screen and (min-width: $valueBreakpoint) {
      .#{$keyBreakpoints}--items--#{$val} {
        align-items: $val;
      }
    }
  }
}

// justify content classes
@each $val in $layout-values {
  .justify--#{$val} {
    justify-content: $val;
  }

  @each $keyBreakpoints, $valueBreakpoint in $breakpoints {
    @media screen and (min-width: $valueBreakpoint) {
      .#{$keyBreakpoints}--justify--#{$val} {
        justify-content: $val;
      }
    }
  }
}

//font-size
@each $keyFont, $val in $font-size {
  .text--#{$keyFont} {
    font-size: $base-font-size * $val;
  }

  @each $keyBreakpoints, $valueBreakpoint in $breakpoints {
    @media screen and (min-width: $valueBreakpoint) {
      .#{$keyBreakpoints}--text--#{$keyFont} {
        font-size: $base-font-size * $val;
      }
    }
  }
}

//flex-direction
@each $val in $flex-direction {
  .f--direction--#{$val} {
    flex-direction: $val;
  }

  @each $keyBreakpoints, $valueBreakpoint in $breakpoints {
    @media screen and (min-width: $valueBreakpoint) {
      .#{$keyBreakpoints}--f--direction--#{$val} {
        flex-direction: $val;
      }
    }
  }
}

//heights
@each $keyHeights, $val in $heights {
  .h--#{$keyHeights} {
    height: $val;
  }

  @each $keyBreakpoints, $valueBreakpoint in $breakpoints {
    @media screen and (min-width: $valueBreakpoint) {
      .#{$keyBreakpoints}--h--#{$keyHeights} {
        height: $val;
      }
    }
  }
}

//widths
@each $keyWidths, $val in $widths {
  .w--#{$keyWidths} {
    width: $val;
  }

  @each $keyBreakpoints, $valueBreakpoint in $breakpoints {
    @media screen and (min-width: $valueBreakpoint) {
      .#{$keyBreakpoints}--w--#{$keyWidths} {
        width: $val;
      }
    }
  }
}

//shadows
@each $keyShadows, $val in $shadows {
  .shadow--#{$keyShadows} {
    box-shadow: $val;
  }

  @each $keyBreakpoints, $valueBreakpoint in $breakpoints {
    @media screen and (min-width: $valueBreakpoint) {
      .#{$keyBreakpoints}--shadow--#{$keyShadows} {
        box-shadow: $val;
      }
    }
  }
}

//floats
@each $keyFloat in $floats {
  .float--#{$keyFloat} {
    float: $keyFloat;
  }

  @each $keyBreakpoints, $valueBreakpoint in $breakpoints {
    @media screen and (min-width: $valueBreakpoint) {
      .#{$keyBreakpoints}--float--#{$keyFloat} {
        float: $keyFloat;
      }
    }
  }
}

//texts
//text transform
@each $keyTransform in $text-transform {
  .transform--#{$keyTransform} {
    text-transform: $keyTransform;
  }

  .first--letter--transform--#{$keyTransform} {
    &::first-letter {
      text-transform: $keyTransform;
    }
  }

  @each $keyBreakpoints, $valueBreakpoint in $breakpoints {
    @media screen and (min-width: $valueBreakpoint) {
      .#{$keyBreakpoints}--transform--#{$keyTransform} {
        text-transform: $keyTransform;
      }

      .#{$keyBreakpoints}--first--letter--transform--#{$keyTransform} {
        &::first-letter {
          text-transform: $keyTransform;
        }
      }
    }
  }
}

//text align
@each $keyAlign in $text-align {
  .align--#{$keyAlign} {
    text-align: $keyAlign;
  }

  @each $keyBreakpoints, $valueBreakpoint in $breakpoints {
    @media screen and (min-width: $valueBreakpoint) {
      .#{$keyBreakpoints}--align--#{$keyAlign} {
        text-align: $keyAlign;
      }
    }
  }
}

//position
@each $keyPosition in $position {
  .position--#{$keyPosition} {
    position: $keyPosition;
  }

  @each $keyBreakpoints, $valueBreakpoint in $breakpoints {
    @media screen and (min-width: $valueBreakpoint) {
      .#{$keyBreakpoints}--position--#{$keyPosition} {
        position: $keyPosition;
      }
    }
  }
}

//text-decoration-line
@each $keyTextDecorationLine in $text-decoration {
  .text--decoration--#{$keyTextDecorationLine} {
    text-decoration-line: $keyTextDecorationLine;
  }

  @each $keyBreakpoints, $valueBreakpoint in $breakpoints {
    @media screen and (min-width: $valueBreakpoint) {
      .#{$keyBreakpoints}--text--decoration--#{$keyTextDecorationLine} {
        text-decoration-line: $keyTextDecorationLine;
      }
    }
  }
}

//text-decoration-line
@each $keyTextDecorationStyle in $text-decoration-style {
  .text--decoration--#{$keyTextDecorationStyle} {
    text-decoration-style: $keyTextDecorationStyle;
  }

  @each $keyBreakpoints, $valueBreakpoint in $breakpoints {
    @media screen and (min-width: $valueBreakpoint) {
      .#{$keyBreakpoints}--text--decoration--#{$keyTextDecorationStyle} {
        text-decoration-style: $keyTextDecorationStyle;
      }
    }
  }
}

//cursors
@each $keyCursor in $cursors {
  .cursor--#{$keyCursor} {
    cursor: $keyCursor;
  }

  @each $keyBreakpoints, $valueBreakpoint in $breakpoints {
    @media screen and (min-width: $valueBreakpoint) {
      .#{$keyBreakpoints}--cursor--#{$keyCursor} {
        cursor: $keyCursor;
      }
    }
  }
}

//list-style
@each $keyList in $list-styles {
  .list--#{$keyList} {
    list-style: $keyList;
  }

  @each $keyBreakpoints, $valueBreakpoint in $breakpoints {
    @media screen and (min-width: $valueBreakpoint) {
      .#{$keyBreakpoints}--list--#{$keyList} {
        list-style: $keyList;
      }
    }
  }
}

//clear fix
.clear--fix {
  clear: both;
}
